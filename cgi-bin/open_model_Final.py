#!/usr/bin/python3
# -*- coding: utf-8 -*-


######################################################
# 保存したモデルを使用し、判定結果を出力するプログラム
######################################################
import cgi
import numpy as np

# jsから値を受け取る
storage = cgi.FieldStorage()
print('Content-type: text/html\n')

# Finalの場合 ####################################
## 元データを使用する場合 #################
test1 = float(storage.getvalue('test1'))
test2 = float(storage.getvalue('test2'))
test3 = float(storage.getvalue('test3'))
test4 = float(storage.getvalue('test4'))
test5 = float(storage.getvalue('test5'))
test6 = float(storage.getvalue('test6'))
test7 = float(storage.getvalue('test7'))
test8 = float(storage.getvalue('test8'))
test9 = float(storage.getvalue('test9'))
test10 = float(storage.getvalue('test10'))
test11 = float(storage.getvalue('test11'))
test12 = float(storage.getvalue('test12'))
test13 = float(storage.getvalue('test13'))
test14 = float(storage.getvalue('test14'))
test15 = float(storage.getvalue('test15'))
test16 = float(storage.getvalue('test16'))
test17 = float(storage.getvalue('test17'))
test18 = float(storage.getvalue('test18'))
test19 = float(storage.getvalue('test19'))
test20 = float(storage.getvalue('test20'))
test21 = float(storage.getvalue('test21'))
test22 = float(storage.getvalue('test22'))
test23 = float(storage.getvalue('test23'))
test24 = float(storage.getvalue('test24'))
test25 = float(storage.getvalue('test25'))
test26 = float(storage.getvalue('test26'))
test27 = float(storage.getvalue('test27'))
test28 = float(storage.getvalue('test28'))
test29 = float(storage.getvalue('test29'))
test30 = float(storage.getvalue('test30'))
test31 = float(storage.getvalue('test31'))
test32 = float(storage.getvalue('test32'))
test33 = float(storage.getvalue('test33'))
test34 = float(storage.getvalue('test34'))
test35 = float(storage.getvalue('test35'))
test36 = float(storage.getvalue('test36'))
test37 = float(storage.getvalue('test37'))
test38 = float(storage.getvalue('test38'))
test39 = float(storage.getvalue('test39'))
test40 = float(storage.getvalue('test40'))
test41 = float(storage.getvalue('test41'))
test42 = float(storage.getvalue('test42'))
test43 = float(storage.getvalue('test43'))
test44 = float(storage.getvalue('test44'))
test45 = float(storage.getvalue('test45'))
test46 = float(storage.getvalue('test46'))
test47 = float(storage.getvalue('test47'))
test48 = float(storage.getvalue('test48'))
test49 = float(storage.getvalue('test49'))
test50 = float(storage.getvalue('test50'))
test51 = float(storage.getvalue('test51'))
test52 = float(storage.getvalue('test52'))
test53 = float(storage.getvalue('test53'))
test54 = float(storage.getvalue('test54'))
test55 = float(storage.getvalue('test55'))
test56 = float(storage.getvalue('test56'))
test57 = float(storage.getvalue('test57'))
test58 = float(storage.getvalue('test58'))
test59 = float(storage.getvalue('test59'))
test60 = float(storage.getvalue('test60'))
test61 = float(storage.getvalue('test61'))
test62 = float(storage.getvalue('test62'))
test63 = float(storage.getvalue('test63'))
test64 = float(storage.getvalue('test64'))
test65 = float(storage.getvalue('test65'))
test66 = float(storage.getvalue('test66'))
test67 = float(storage.getvalue('test67'))
test68 = float(storage.getvalue('test68'))
test69 = float(storage.getvalue('test69'))
test70 = float(storage.getvalue('test70'))
test71 = float(storage.getvalue('test71'))
test72 = float(storage.getvalue('test72'))
test73 = float(storage.getvalue('test73'))
test74 = float(storage.getvalue('test74'))
test75 = float(storage.getvalue('test75'))
test76 = float(storage.getvalue('test76'))
test77 = float(storage.getvalue('test77'))
test78 = float(storage.getvalue('test78'))
test79 = float(storage.getvalue('test79'))
test80 = float(storage.getvalue('test80'))
test81 = float(storage.getvalue('test81'))
test82 = float(storage.getvalue('test82'))
test83 = float(storage.getvalue('test83'))
test84 = float(storage.getvalue('test84'))
test85 = float(storage.getvalue('test85'))
test86 = float(storage.getvalue('test86'))
test87 = float(storage.getvalue('test87'))
test88 = float(storage.getvalue('test88'))
test89 = float(storage.getvalue('test89'))
test90 = float(storage.getvalue('test90'))
test91 = float(storage.getvalue('test91'))
test92 = float(storage.getvalue('test92'))
test93 = float(storage.getvalue('test93'))
test94 = float(storage.getvalue('test94'))
test95 = float(storage.getvalue('test95'))
test96 = float(storage.getvalue('test96'))
test97 = float(storage.getvalue('test97'))
test98 = float(storage.getvalue('test98'))
test99 = float(storage.getvalue('test99'))
test100 = float(storage.getvalue('test100'))
test101 = float(storage.getvalue('test101'))
test102 = float(storage.getvalue('test102'))
test103 = float(storage.getvalue('test103'))
test104 = float(storage.getvalue('test104'))
test105 = float(storage.getvalue('test105'))
test106 = float(storage.getvalue('test106'))
test107 = float(storage.getvalue('test107'))
test108 = float(storage.getvalue('test108'))
test109 = float(storage.getvalue('test109'))
test110 = float(storage.getvalue('test110'))
test111 = float(storage.getvalue('test111'))
test112 = float(storage.getvalue('test112'))
test113 = float(storage.getvalue('test113'))
test114 = float(storage.getvalue('test114'))
test115 = float(storage.getvalue('test115'))
test116 = float(storage.getvalue('test116'))
test117 = float(storage.getvalue('test117'))
test118 = float(storage.getvalue('test118'))
test119 = float(storage.getvalue('test119'))



import pickle

# モデルのオープン
with open('model_Final.pickle', mode='rb') as f:
    model = pickle.load(f)


# 適用時: スケーリングパラメータを読み込む
with open('scaling_parameters_Final.pkl', 'rb') as file:
    scaling_params = pickle.load(file)

mean_value = scaling_params['mean']
std_deviation = scaling_params['std']
print(mean_value)
print(std_deviation)

# 評価データ ここにその都度入ってきたデータを入れる。
# data = [[-5.626374953064618,0,-2.6067540171366588,-2.083333328159319,-0.40764486589964827,-2.083333328159319,-0.05095463634006647,0.9290279265372984,0.22302368344881013,0.1391256581182065,-0.05095463634006647,0.2500057214250025,0,5.651046319130897,2.6204220171722876,2.098280395220005,0.4108171267837925,2.098280395220005,-5.626374953064618,0,-2.6067540171366588,-2.083333328159319,-0.40764486589964827,-2.083333328159319,-0.05095463634006647,0.9290298954133065,0.22302316780887524,0.13912831182065216,-0.05095463634006647,0.25000254251062237,0,5.651046006105239,2.620421977173573,2.098280016461378,0.4108171267837925,2.098280016461378,-0.618282960255341,1.1612905078619467,0.03956342784794587,-0.05801633686525708,-0.025964641061245713,0.22911399406290936,0.1004218294813896,0.22911399406290936,0.16885460721015488,0.22911399406290936,0.06573233611782754,0.00418952115527936,-0.2111427117207575,0.057964234819405006,-0.00818825320584239,0.0050518673419708985,-0.0032455182283635735,-0.016045279500613546,-0.007660843185572356,-0.016045279500613546,-0.03523220129161391,-0.016045279500613546,-0.011513729488072052,0.004927597006243667,-1.180329144079334,0.6209940993764004,-0.040404544099403035,0.058245153189023825,0.02616669589401702,-0.22953787197634418,-0.1006748825583117,-0.22953787197634418,-0.17227193847557373,-0.22953787197634418,-0.06685512185690484,-0.003563607026787978,-0.618282960255341,1.1612905078619467,0.03956342784794587,-0.05801633686525708,-0.025964641061245713,0.22911399406290936,0.1004218294813896,0.22911399406290936,0.16885460721015488,0.22911399406290936,0.06573233611782754,0.00418952115527936,-0.21114315919257992,0.05796386629413071,-0.008188342979379553,0.0050518673419708985,-0.0032455182283635735,-0.016045610637527317,-0.00766087413880908,-0.016045610637527317,-0.03523238306297529,-0.016045610637527317,-0.011513799680061394,0.004927888440791487,-1.1803292241252359,0.6209940649779766,-0.040404554712747884,0.05824512996114752,0.02616669589401702,-0.22953791143036775,-0.10067488848745071,-0.22953791143036775,-0.1722719649219223,-0.22953791143036775,-0.06685513333146552,-0.0035636260837109204,0.1162109375,0.9765625,0.7900390625,0.8876953125,0.66015625,0.1162109375,145.5,372.79998779296875,34.400054931640625,372.79998779296875,34.4000244140625],
#         [-4,-1.4814814716700173,-2.56354775983289,-2.363036166503546,-1.6576543548995217,-1.5833346009668345,-0.07207372151608141,0.9697037537163045,0.44366731170373475,0.41522409675916017,-0.07207372151608141,0.4999955482781044,1.4833322522129586,4.095654661886014,2.6138939418270155,2.369173877191538,1.6592204740933396,1.6604047720109478,-4,-1.4814814716700173,-2.56354775983289,-2.363036166503546,-1.6576543548995217,-1.5833346009668345,-0.07207097218472469,0.969700671132648,0.44366762622485867,0.41522672758482815,-0.07207097218472469,0.4999987271924845,1.4833321111036144,4.09565597329219,2.613894023379769,2.3691736826865046,1.6592203546693252,1.6604057292761036,-0.14933822985036224,0.1921381453765698,-0.012984767921459075,-0.03372797622373816,-0.14933822985036224,0.1763390926804362,0.023430467003803884,0.023430467003803884,0.06346684015060401,0.09560368694933734,0.00039728084263396355,-0.03372797622373816,-0.07144319094645843,0.05615376084269417,0.006207234753084495,0.010847489763953645,-0.006493128050565151,-0.04315589157686661,0.002118503622950612,0.002118503622950612,-0.010076279574809034,-0.008127413087772773,0.0068791394297055665,0.017531842392731395,-0.20100652967550464,0.14947932166932207,0.013877326603032055,0.03454724391870966,0.14947932166932207,-0.18135104041020672,-0.02210701812369796,-0.02210701812369796,-0.06401484168493222,-0.09609492061351753,0.0006974863404433229,0.03454724391870966,-0.14933822985036224,0.1921381453765698,-0.012984767921459075,-0.03372797622373816,-0.14933822985036224,0.1763390926804362,0.023430467003803884,0.023430467003803884,0.06346684015060401,0.09560368694933734,0.00039728084263396355,-0.03372797622373816,-0.07144409441754604,0.056152917990672714,0.0062073267842365585,0.010847251121329256,-0.006492880363056068,-0.043155257686202354,0.0021186821665678916,0.0021186821665678916,-0.010076337484771998,-0.008126938770440047,0.006879288033551678,0.01753201922548627,-0.20100668246230768,0.14947931091040187,0.013877343835924922,0.03454742099429135,0.14947931091040187,-0.18135085931476957,-0.022106964778410107,-0.022106964778410107,-0.06401484717407914,-0.0960948179959791,0.0006975094774120386,0.03454742099429135,0.083984375,0.875,0.567578125,0.59521484375,0.7265625,0.083984375,101.30000007152557,236.80001831054688,44.000030517578125,236.80001831054688,44],
#         [0,0.9795955783473987,0.27662143137868545,0.15533743624704527,0,0,-0.08602019213076413,0.07619222005208333,-0.028560829646909713,0,0,0,0,0.9829904206499529,0.2851593499290949,0.1616136959384516,0,0,0,0.9795955783473987,0.27662143137868545,0.15533743624704527,0,0,-0.08602019213076413,0.07618931361607142,-0.02856071950531855,0,0,0,0,0.9829909378342214,0.2851590454904808,0.1616136959384516,0,0,-0.06562006789559718,0.036183223406732135,-0.0002614677039422689,0,0,0,-0.0018479672221734765,0,-0.0019798496818717887,-0.000304672801964184,-0.005010020652434576,-0.000609345603928368,-0.008560923624291197,0.010246136056813297,0.00022156909959985673,0,0,-0.008560923624291197,-0.00032613042864224366,0,-0.00003331526525041679,0,0.0008271592448164718,2.991626113214158e-7,-0.06499063870981546,0.036529635888270136,-0.0003683453989080179,0.00016659475041351174,0,-0.008560923624291197,-0.00217409765081572,-0.003695934444346953,-0.0022029345042394563,-0.0030911186672321904,-0.005176844359961488,-0.0063488320848778925,-0.06562006789559718,0.036183223406732135,-0.0002614677039422689,0,0,0,-0.0018479672221734765,0,-0.0019798496818717887,-0.000304672801964184,-0.005010020652434576,-0.000609345603928368,-0.008560597058446287,0.010245745206687156,0.00022155586554838225,0,0,-0.008560597058446287,-0.00032611798803844263,0,-0.00003331533854570168,0,0.0008271451567616563,5.983252226442057e-7,-0.06499068991617855,0.03652968866217534,-0.0003683394616195551,0.00016659475041351174,0,-0.008560597058446287,-0.002174085210211919,-0.003695934444346953,-0.0022029238338196287,-0.003091212905020949,-0.005176837364023798,-0.00634902056045541,0.1357421875,0.6796875,0.4956825657894737,0.5439453125,0.3564453125,0.1357421875,192.29999995231628,52,6.4000244140625,52,6.39996337890625],
#         [-0.10811058198385666,0.08888753255208333,0.00038015080306648977,0,-0.06779557594927924,0.079998779296875,-0.079998779296875,1.5135089698022655,0.3319698890965324,0.18266271012640345,-0.06780074842016878,-0.079998779296875,0,1.517365249242516,0.354295666178,0.19270945466759482,0.09588108053536687,0.1131353586549326,-0.10811058198385666,0.08888753255208333,0.00038015080306648977,0,-0.06779557594927924,0.079998779296875,-0.079998779296875,1.5135110318007774,0.3319698629723098,0.1826645709543271,-0.06780074842016878,-0.079998779296875,0,1.5173673060006077,0.35429563904970895,0.19271131549551845,0.09588108053536687,0.1131353586549326,-0.009336925780218625,0.02206338418569158,0.0011018483542714814,0,-0.00574538781552887,0.0079998779296875,0.0024114858504564935,0.00399993896484375,0.00032088880908989797,0,0.0013889490443578087,0,-0.16967191041855528,0.10226411908701119,-0.008447443949735758,0,-0.005745826160521282,-0.0079998779296875,-0.0022395937329286533,-0.00399993896484375,-0.005726427331392252,-0.005533437478221993,-0.011660629970777577,-0.0027667187391109964,-0.1699335380882527,0.10252467850739051,-0.00744070969013049,0.0011340923559151263,0.00812551533244251,0.01131353586549326,0.003000276083901155,0.0044589477518799615,-0.0034397451364624803,0,-0.010532172148726199,0.0005378233127258018,-0.009336925780218625,0.02206338418569158,0.0011018483542714814,0,-0.00574538781552887,0.0079998779296875,0.0024114858504564935,0.00399993896484375,0.00032088880908989797,0,0.0013889490443578087,0,-0.16967155083827548,0.1022642584112343,-0.008447487723497996,0,-0.005745826160521282,-0.0079998779296875,-0.0022395937329286533,-0.00399993896484375,-0.005726427331392252,-0.005533437478221993,-0.0116607086865129,-0.0027667187391109964,-0.1699331790615796,0.10252481747753117,-0.007440753422685167,0.0011342400406713898,0.00812551533244251,0.01131353586549326,0.003000276083901155,0.0044589477518799615,-0.0034397451364624803,0,-0.010532250814096724,0.0005378233127258018,0.056640625,0.6083984375,0.4776278409090909,0.515625,0.25390625,0.056640625,227,4,79.99996948242188,4,80],
#         [-0.4999971408396853,1.1182756378741707,0.005939766549050002,-0.07079538020748113,-0.07079538020748113,-0.0800048828125,-0.742269296045061,0.9795862362316007,0.11237851907460118,0.08333524047500084,0,-0.15999755859375,0,1.1215794401027566,0.4380638398763929,0.4064266763134044,0.07079538020748113,0.1788854382832832,-0.4999971408396853,1.1182756378741707,0.005939766549050002,-0.07079538020748113,-0.07079538020748113,-0.0800048828125,-0.742269296045061,0.9795893502702,0.11237861235415425,0.08333206156062072,0,-0.15999755859375,0,1.1215791884244255,0.4380635936963271,0.4064266763134044,0.07079538020748113,0.1788854382832832,-0.06277798116258687,0.06964380708612135,0.00023335136766046763,0,-0.00626507792090472,-0.008000488281249999,0.00023205480293674117,-0.0026338131081859303,-0.004372314019562008,-0.0026338131081859303,0.0007711459610676415,-0.0006606058103192616,-0.06260691232658147,0.047345618581695725,-0.0005693922908688695,-0.002244739539641267,0,0.00399993896484375,-0.011698593429117284,-0.005053321621469469,0.0014259226806674177,-0.002244739539641267,-0.001856271287513964,-0.0032490007143939677,-0.06250041014378066,0.06610108988190819,-0.0007002848448462953,0.001011570744395839,0.00626507792090472,-0.002111150995890429,-0.008199668294935514,-0.002111150995890429,-0.003511749569960144,-0.002111150995890429,-0.0021454559027906488,-0.001251456172072394,-0.06277798116258687,0.06964380708612135,0.00023335136766046763,0,-0.00626507792090472,-0.008000488281249999,0.00023205480293674117,-0.0026338131081859303,-0.004372314019562008,-0.0026338131081859303,0.0007711459610676415,-0.0006606058103192616,-0.06260719542099959,0.04734645558369984,-0.0005693886655161684,-0.002244739539641267,0,0.00399993896484375,-0.01169862488405263,-0.005053321621469469,0.0014259230130628517,-0.002244739539641267,-0.0018562724093365074,-0.0032490007143939677,-0.06250038640054194,0.06610120619591585,-0.0007002887373065346,0.0010112593723085824,0.00626507792090472,-0.002111150995890429,-0.008199699749870861,-0.002111150995890429,-0.003511749818400831,-0.002111150995890429,-0.002145468097579028,-0.001251456172072394,0.0615234375,0.6015625,0.4788562863372093,0.5,0.2158203125,0.0615234375,436.39999997615814,55.199951171875,55.200042724609375,55.199951171875,55.20001220703125]
#         ]
data = np.array( [
    [test1, test2, test3, test4, test5, test6, test7, test8, test9, test10,
    test11, test12, test13, test14, test15, test16, test17, test18, test19, test20,
    test21, test22, test23, test24, test25, test26, test27, test28, test29, test30,
    test31, test32, test33, test34, test35, test36, test37, test38, test39, test40,
    test41, test42, test43, test44, test45, test46, test47, test48, test49, test50,
    test51, test52, test53, test54, test55, test56, test57, test58, test59, test60,
    test61, test62, test63, test64, test65, test66, test67, test68, test69, test70,
    test71, test72, test73, test74, test75, test76, test77, test78, test79, test80,
    test81, test82, test83, test84, test85, test86, test87, test88, test89, test90,
    test91, test92, test93, test94, test95, test96, test97, test98, test99, test100,
    test101, test102, test103, test104, test105, test106, test107, test108, test109, test110,
    test111, test112, test113, test114, test115, test116, test117, test118, test119]
] )

## データを標準化する処理 ##########
from sklearn.preprocessing import StandardScaler,MinMaxScaler
stdsc = StandardScaler()
test_data = ( data - mean_value ) / std_deviation
# test2_data = stdsc.transform(data)


# モデルを用いた予測
ans = model.predict(test_data)

 
# # 予測結果を出力
# print("予測対象：\n", data, ", \n予測結果→", ans)
# print(test_data)
# print(test2_data)
print(ans)